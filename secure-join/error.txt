1.
KeyOt 방식은 Key에 대한 correlation을 재활용하는 것이 핵심 방법인데, 이는 stateful PRG에 의존함.
stateful PRG를 사용한다는 것은 순서에 따라 wPRG의 값이 달라진다는 것이다.
즉, okvs decode의 결과로 순서가 없어지게 되면,같은 r값을 wPRG에 넣어도 다른 값이 나올 수 있다.
-cuckoo hash로는 해결 불가(security concern)

이에 대한 해결 방법을 모색

2.
GMW input을 sender의 경우 ZeroBlock으로 고정
receiver의 경우 아래의 규칙에 따라 생성

case1. oc::block(0, i*2)

	gmw_count(b0 xor b1 == 1) is 0

	received intersction is 65536

case2. oc::block(0, i*2 + 1)

	gmw_count is 65536

	received intersction is 0

case3. oc::block(0, i)

gmw_count is 32768

received intersction is 32768

최하위 1bit만을 보고 gmw로 판단하는 오류가 존재한다.
cir = isZeroCircuit(80);     --->     cir = isZeroCircuit(1);로 수정 후 circuit 80번 호출한다면 correctness는 만족할 수 있다.
이렇게 구현을 완료해 두었지만 security concern이 걱정됩니다.

3.
변수 생성 시간은 같지만 wPRF의 시간은 증가하였다.
Mod3 -> Mod2 convert 함수 부분에서 증가하였다. (correlation을 사용하는 부분)

.png 파일에 결과 존재
